version: "3.9"
services:
  gateway:
    image: nginx:stable
    volumes:
      - ./ops/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      auth-service:
        condition: service_healthy
      incident-svc:
        condition: service_healthy
      realtime-svc:
        condition: service_healthy
      warlog-svc:
        condition: service_healthy
      tak-ingest-svc:
        condition: service_healthy
      ui:
        condition: service_healthy
      eng-svc:
        condition: service_healthy
      playbook-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 10
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    env_file:
      - ./ops/env/auth.env
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3001/health"]
      interval: 10s
      timeout: 3s
      retries: 10
  incident-svc:
    build:
      context: .
      dockerfile: services/incident-svc/Dockerfile
    env_file:
      - ./ops/env/incident.env
    depends_on:
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3002/health"]
      interval: 10s
      timeout: 3s
      retries: 10
  warlog-svc:
    build: ./services/warlog-svc
    env_file:
      - ./ops/env/warlog.env
    depends_on:
      - postgres
      - opensearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 5s
      timeout: 5s
      retries: 5
  tak-ingest-svc:
    build:
      context: .
      dockerfile: services/tak-ingest-svc/Dockerfile
    env_file:
      - ./ops/env/tak.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "3004:3004"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3004/health"]
      interval: 10s
      timeout: 3s
      retries: 10
  realtime-svc:
    build:
      context: .
      dockerfile: services/realtime-svc/Dockerfile
    env_file:
      - ./ops/env/realtime.env
    depends_on:
      redis:
        condition: service_started
    ports:
      - "3003:3003"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3003/health"]
      interval: 10s
      timeout: 3s
      retries: 10
  playbook-svc:
    build:
      context: ./services/playbook-svc
    environment:
      - PORT=3005
      - PGURL=postgres://tactix:tactix@postgres:5432/tactix
      - ORG_CODE=1R22eR
    volumes:
      - ./playbooks:/app/playbooks:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3005/health"]
      interval: 10s
      timeout: 3s
      retries: 10
  eng-svc:
    build: ./services/eng-svc
    env_file:
      - ./ops/env/eng.env
    depends_on:
      - postgres
      - nats
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 5s
      timeout: 5s
      retries: 5
  ui:
    build:
      context: .
      dockerfile: ui/Dockerfile
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 10
  nats:
    image: nats:2
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - ./ops/nats.conf:/etc/nats/nats.conf:ro
    command: ["-c", "/etc/nats/nats.conf"]
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: tactix
      POSTGRES_PASSWORD: tactix
      POSTGRES_DB: tactix
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tactix -d tactix"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./ops/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
  opensearch:
    image: opensearchproject/opensearch:2
    environment:
      discovery.type: single-node
      plugins.security.disabled: "true"
    volumes:
      - osdata:/usr/share/opensearch/data
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: tactix
      MINIO_ROOT_PASSWORD: tactix-secret
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
volumes:
  pgdata: {}
  redisdata: {}
  osdata: {}
  miniodata: {}
